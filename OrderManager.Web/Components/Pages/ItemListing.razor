@page "/items"
@using OrderManager.Models
@rendermode InteractiveServer

@inject OrderManagerApiClient OrderManagerApi
@inject IJSRuntime Js

<PageTitle>DataItems</PageTitle>

<h1>DataItems</h1>

<p>This component lists all dataItems from the OrderManager api.</p>

@if (dataItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var dataItem in dataItems)
        {
            <tr>
                <td>@dataItem.DataItemName</td>
                <td><button class="btn btn-primary" @onclick="() => DeleteDataItem(dataItem)">Delete</button></td>
            </tr>
        }
        </tbody>
    </table>
    
    <h2>Create New Item</h2>
    <EditForm Model="_newDataItem" OnValidSubmit="CreateDataItem">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="itemName" class="form-label">DataItem Name</label>
            <InputText id="itemName" class="form-control" @bind-Value="_newDataItem.DataItemName" />
        </div>
        <button type="submit" class="btn btn-success">Create</button>
    </EditForm>
}


@code {
    private DataItem[]? dataItems;
    private DataItem _newDataItem = new DataItem();

    protected override async Task OnInitializedAsync()
    {
        dataItems = await OrderManagerApi.GetDataItemsAsync();
    }
    async Task DeleteDataItem(DataItem dataItem)
    {
        await OrderManagerApi.DeleteDataItemAsync(dataItem.Id);
        dataItems = await OrderManagerApi.GetDataItemsAsync();
    }
    
    async Task CreateDataItem()
    {
        await OrderManagerApi.CreateDataItemAsync(_newDataItem);
        _newDataItem = new DataItem(); // Reset the form
        dataItems = await OrderManagerApi.GetDataItemsAsync();
    }
}

