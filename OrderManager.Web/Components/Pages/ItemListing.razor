@page "/items"
@using OrderManager.Models
@rendermode InteractiveServer

@inject OrderManagerApiClient OrderManagerApi
@inject IJSRuntime Js

<PageTitle>Products</PageTitle>

<h1>Items</h1>

<p>This component lists all items from the OrderManager api.</p>

@if (items == null)
{
    <p><em>Loading...</em></p>
}
else
{
    
    <table class="table">
        <thead>
        <tr>
            <th>Name</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in items)
        {
            <tr>
                <td>@item.ItemName</td>
                <td><button class="btn btn-primary" @onclick="() => DeleteItem(item)">Delete</button></td>
            </tr>
        }
        </tbody>
    </table>
    
    <h2>Create New Item</h2>
    <EditForm Model="newItem" OnValidSubmit="CreateItem">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="itemName" class="form-label">Item Name</label>
            <InputText id="itemName" class="form-control" @bind-Value="newItem.ItemName" />
        </div>
        <button type="submit" class="btn btn-success">Create</button>
    </EditForm>
}


@code {
    private Item[]? items;
    private Item newItem = new Item();

    protected override async Task OnInitializedAsync()
    {
        items = await OrderManagerApi.GetItemsAsync();
    }
    async Task DeleteItem(Item item)
    {
        await OrderManagerApi.DeleteItemAsync(item.Id);
        items = await OrderManagerApi.GetItemsAsync();
    }
    
    async Task CreateItem()
    {
        await OrderManagerApi.CreateItemAsync(newItem);
        newItem = new Item(); // Reset the form
        items = await OrderManagerApi.GetItemsAsync();
    }
}

