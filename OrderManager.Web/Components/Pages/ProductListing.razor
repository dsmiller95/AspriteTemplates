@page "/products"
@rendermode InteractiveServer
@using OrderManager.ApiService.Models

@inject OrdersApiClient OrdersApi
@inject CartService Cart
@inject IJSRuntime Js

<PageTitle>Products</PageTitle>

<h1>Products</h1>

<p>This component lists all products from the products api.</p>

@if (products == null || cart == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Price ($)</th>
                <th>In Stock</th>
                <th></th>
                <th>In Cart</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.Price</td>
                    <td>@product.StockQuantity</td>
                    <td>
                        <button disabled="@(!cart.CanAddToCart(product, 1))" @onclick="() => AddToCart(product)">Add to Cart</button>
                    </td>
                    <td>
                        @cart.GetAmountInCart(product)
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Product[]? products;
    private Cart? cart;
    private int currentCount = 0;

    protected override async Task OnInitializedAsync()
    {
        products = await OrdersApi.GetProductAsync();
        cart = await Cart.GetCartAsync();
    }
    
    async Task AddToCart(Product product)
    {
        if (cart == null)
        {
            throw new InvalidOperationException();
        }
        
        cart.AddToCart(product, 1);
        await Cart.SetCartAsync(cart);
    }

}

